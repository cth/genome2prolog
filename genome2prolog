#!/usr/bin/env ruby

# Point it to the directory where the genbank files are and it will generate
# Prolog representations of the files.

require 'rubygems'
require 'bio'

class String
  def to_prolog
    "'" + self.gsub("'",'\\\\\'') + "'"
  end
  
  def to_prolog_atom
    self.downcase
  end
end

class Array
  def to_prolog
    to_prolog_list
  end
  
  def to_prolog_facts
    (self.map{ |e| e.to_prolog}).join('\n')
  end
  
  def to_prolog_list
    "[" + (self.map { |e| e.to_prolog}).join(',') + "]"
  end
end

# Change include? method of Range class to detect overlapping ranges
class Range
  alias :orig_include? :include?
  
  def include?(o)
    if o.class == Range
      o.last.to_i >= self.first.to_i and o.first.to_i <= self.last.to_i
    else
    	orig_include?(o)
    end
  end
end

# Class representing an entire genome
class Genome
  attr_accessor :id, :data, :range

  def initialize(id, data, range=nil)
    @id, @data, @range = id, data, range
    @genes = []
    @gene_positions = []
    @data = @data.gsub("\n","").downcase
    @range = 0..@data.length-1 if @range.nil?
    @genemap = []
    @range.each { |i| @genemap[i.to_i] = :nongene }
  end
  
  def <<(gene)
    return if gene.position.first.to_i < @range.first.to_i or gene.position.last.to_i > @range.last.to_i
    gene.genome = self
    @genes << gene
    gene.position.each do |nt|
      @genemap[nt.to_i] = :gene 
    end
  end
  
  def [](index)
    @data[index]
  end
  
  def length
    @data.length
  end
  
  def inside_gene(position)
    position = [position] if position.class = Fixnum
    return false unless @range.include?(position)
    position.each { |i| return false unless @genemap[i] == :gene }
    true
  end
  
  # Infers non-gene regions when all gene regions have been added
  def nongenes
    raise "FIXME: Implement"
  end
  
  def genome_to_prolog
    "genome('@id', #{@data[@range].gsub("\n", "").downcase.split("").to_a.to_prolog}).\n"
  end
  
  def genes_to_prolog
    prolog = []
    @genes.each do |gene|
      next unless @range.include?(gene.position)
      prolog << gene.to_prolog
      puts prolog.size
    end
    prolog
  end
  
  # Creates facts:
  # nucleotide(Pos,Nucletide,gene) and nucleotide(Pos,Nucleotide,nongene) 
  def nucleotide_facts
    facts = []
    puts "Generating nucleotide facts in range #{@range}"
    @range.each { |i| i = i.to_i; facts << "nt(#{i},#{@data[i].chr},#{@genemap[i].to_s})." }
    facts
  end
  
  def gene_pos_facts
    facts = []
    @genes.each do |gene|
      next unless @range.include?(gene.position)
      facts << "genepos(#{gene.position.first},#{gene.position.last})."
    end
    facts
  end
end

class GenomeRange
  def initialize(start,stop,genome)
    @start, @stop, @genome = start, stop, genome
  end
  
  def data
    if @data.nil? and not @genome.nil?
      @genome[@start..@stop]
    else
      @data
    end
  end
  
  def position
    @start..@stop
  end
end

class Gene < GenomeRange
  attr_accessor :genome
  attr_writer :data
  
  def initialize(id, start, stop, strand, data, genome=nil)
    @id, @start, @stop, @strand, @data, @genome = id, start, stop, strand, data, genome
  end
  
  def to_prolog
    "gene('#{@id}', #{@start}, #{@stop}, #{@strand.to_prolog_atom}, #{data.gsub("\n","").downcase.split("").to_a.to_prolog_list})."
  end
end

class NonCoding < GenomeRange
end

#
# NCBIReader: Responsible for processing data in fasta format
#
class NCBIReader
  attr_accessor :genome, :range
  
  def initialize(options)
    options.each { |key,val| instance_variable_set(("@"+key.to_s).to_sym,val) }
    raise "No directory given!" if @datadir.nil?
  end
  
  def process_data
    files = Dir.open(@datadir).to_a.map { |f| @datadir + "/" + f }
    files.each { |f| process_genome(Bio::FastaFormat.open(f)) if f =~ /.*\.fna/ }
    @genome ||= Genome.new(nil,nil,@range) # Make a "null" genome if no genome file present
    @range = @genome.range if @range.nil?
    files.each { |f| process_genes(Bio::FastaFormat.open(f)) if f =~ /.*\.ffn/ }
  end
  
  def process_genes(genes)
    puts "Processing individual genes..."
    genes.each { |gene| process_gene(gene) }
  end
  
  def process_gene(gene)
    defline = Bio::FastaDefline.new(gene.definition)
    if defline.list_ids[0][2] =~ /:(c?)(\d+)-(\d+)/
      strand = ($1=="c") ? "complementary" : "primary"
  #    puts @strand
      if @strand==strand or @strand.nil?
        @genome << Gene.new(defline.to_s,$2,$3,strand, gene.data)
      end
    end
  end
  
  def process_genome(genome)
    puts "Processing genome..."
    genome.each do |g| # Even though we only expect one genome, have to do it like this...
      defline = Bio::FastaDefline.new(g.definition) 
      @genome = Genome.new(defline.list_ids[0][1], g.data, @range)
    end
  end
  
  def count_frequencies(lower_chunk_size_limit, upper_chunk_size_limit, sequence, collector)
    count_table={}
    lower_chunk_size.upto(upper_chunk_size_limit) do |i|
      position = 0
      dna.window_search(i,1) do |chunk|
        position = position + 1
        collector.add_count(position, chunk)
      end
    end
  end
  
  def checkdata
  end
  
  def write_prolog_file(filename)
    File.open(filename, "w") { |f| f << @genome.to_prolog }
  end
end

#
# The Action class represents actions for script specified on the command line
#
class Action
  def valid(action)
    self.actions.include? action.downcase.gsub("-", "_")
  end
  
  def actions
    (self.methods.map { |m| $1 if m =~ /^action_(.*)/ }).reject { |a| a.nil? }
  end
  
  def initialize(cmdline)
    @args = cmdline
    @actions, @options = [], {}
    
    begin
      raise "Insufficient arguments given!" if @args.length < 3
      @options[:datadir], @options[:outputfile] = @args.shift, @args.shift
      
      @args.each do |action|
        if action =~ /(.+)=(.+)/
          self.send("option_" + $1, $2)
        elsif valid(action) 
          @actions << "action_" + action
        else
          raise "!! Unknown action/option: #{action}"
        end
      end
      
      @reader = NCBIReader.new(@options)

    rescue => e
      puts "!" + e.to_s
      print_help
    end
  end
  
  def print_help
    help = "
    This program reads some genbank data files and converts the
    data (or selected parts of it) to Prolog facts.


    The program expects to be run with following arguments:

    genome2prolog inputdir outputfile actions [options]

    actions is a space separated list of actions from the set:
    genome, genes, nucleotides, nongenes, checkdata, gene_positions.

    The actions will be run in the order specified.

    options is a space separate set of option keys and values, 
    each with the syntax: key=value

    Supported actions include: 

    range=To-From   Where To and From denote a range of nucleotide positions (inclusive)

    strand=primary|complementary    Which strand to consider (both if not specified)"
    puts help
    exit -1
  end
  
  def add_action(action)
    raise "#{action} is not a valid action" unless self.valid(action)
    @actions << "action_" + action.downcase.gsub("-", "_")
  end
  
  def run_actions
    @reader.process_data
    File.open(@options[:outputfile], "w") do |file|
      @actions.each do |a| 
        puts "Running #{a.gsub('_', ' ')}..."
        file << self.send(a).join("\n")
      end
    end
    puts "Wrote #{@options[:outputfile]}."
  end
  
  ### Option parsers
  
  def option_range(range)
    if range =~ /(\d+)-(\d+)/
      @options[:range] = ($1.to_i)..($2.to_i)
    else
      raise "Invalid range given: #{range}"
      print_help
    end
  end
  
  def option_strand(strand)
    if strand == "primary" or strand == "complementary"
      @options[:strand] = strand
    else
      raise "Invalid strand given: #{strand}"
    end
  end
  
  ###  ###  ###  ###  ###  ###  ###  ###  ###  ###  ###  ###  ###  ###  ### 
  ## Action specifications - corresponds to specific command-line options:
  
  def action_nucleotides
    @reader.genome.nucleotide_facts
  end
  
  def action_checkdata
     @reader.checkdata
  end
  
  def action_gene_positions
    @reader.genome.gene_pos_facts
  end
  
  def action_genome
    @reader.genome.to_prolog
  end
  
  def action_genes
    @reader.genome.genes_to_prolog
  end
  
  def action_nongenes
  end
end

#########################################################
puts "-"*60
puts "genome2prolog version 0.1"
puts "Christian Theil Have <cth@ruc.dk>"
puts "-"*60
#########################################################

Action.new(ARGV).run_actions